
filetype plugin on
set nodigraph
set matchpairs=(:),{:},[:],<:>
set magic
let mapleader = ","
let g:mapleader = ","
set shortmess=atI
set mousehide
set modeline modelines=10
" set ttyfast lasyredraw
set ruler showcmd showmode
set nostartofline
set nobackup nowritebackup noswapfile
set ignorecase smartcase
set autowrite
set wildignore+=*.o,*.obj,*.a,*.so
set splitbelow splitright
set nocursorcolumn
set nocursorline
set showtabline=1
set linespace=0
set cursorline
nnoremap ; :

"http://vimdoc.sourceforge.net/htmldoc/options.html#%27viminfo%27
"set viminfo='25,\"50,n~/.viminfo
"set viminfo='50,\"100,:100,%,n~/.viminfo
set viminfo='50,<1000,s100,:0,n~/.viminfo

iab xdate <c-r>=strftime("%c")<cr>
iab teh the
iab teh the

map <F1> <Esc>
imap <F1> <Esc>
vmap <F1> <Esc>

function! DecodeLine()
  let cmd = 'python ~/bin/vmind4vim.py'
  let line = getline('.')
  echo cmd
  echo line
  let toto = system(cmd . ' ' .'"' . line , '"' )
  echo toto
endfunction

map <F1> :call DecodeLine()<Cr>

function! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal 'z"
  endfunction

autocmd BufWrite *.h :call DeleteTrailingWS()
autocmd BufWrite *.c :call DeleteTrailingWS()
autocmd BufWrite *.cpp :call DeleteTrailingWS()

if filereadable(expand("~/.vimrc-local"))
  source ~/.virmrc-local
endif

" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
" disable vi compatibility (emulation of old bugs)
set nocompatible
" use indentation of previous line
set autoindent smartindent
" use intelligent indentation for C
set smartindent
" configure tabwidth and insert spaces instead of tabs
set tabstop=2        " tab width is 2 spaces
set softtabstop=2    " tab width is 2 spaces
set shiftwidth=2     " indent also with 2 spaces
set expandtab        " expand tabs to spaces
" wrap lines at 120 chars. 80 is somewaht antiquated with nowadays displays.
" set textwidth=120
set wrap
" turn syntax highlighting on
set t_Co=256

syntax on
" colorscheme wombat256
" turn line numbers on
set number noinsertmode noicon
" highlight matching braces
set showmatch matchtime=1
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */
" Highlight all occurrence of a selected word
"set nohlsearch
set hlsearch
set incsearch
set smartcase 

"set hls ic is nu noswf
"set hlsearch    " highlight all search results
"set ignorecase  " do case insensitive search 
"set incsearch   " show incremental search results as you type
"set number      " display line number
"set noswapfile  " disable swapfile



" Install OmniCppComplete like described on http://vim.wikia.com/wiki/C++_code_completion
" This offers intelligent C++ completion when typing ‘.’ ‘->’ or <C-o>
" Load standard tag files
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/gl
set tags+=~/.vim/tags/sdl
set tags+=~/.vim/tags/qt4

" Install DoxygenToolkit from http://www.vim.org/scripts/script.php?script_id=987
let g:DoxygenToolkit_authorName="John Doe <john@doe.com>"

" Enhanced keyboard mappings
"
" in normal mode F2 will save the file
nmap <F2> :w<CR>
" in insert mode F2 will exit insert, save, enters insert again
imap <F2> <ESC>:w<CR>i
" switch between header/source with F4
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
" recreate tags file with F5
map <F5> :!ctags -R –c++-kinds=+p –fields=+iaS –extra=+q .<CR>
" create doxygen comment
map <F6> :Dox<CR>
" build using makeprg with <F7>
map <F7> :make<CR>
" build using makeprg with <S-F7>
map <S-F7> :make clean all<CR>
" goto definition with F12
map <F12> <C-]>
" in diff mode we use the spell check keys for merging
if &diff
  ” diff settings
  map <M-Down> ]c
  map <M-Up> [c
  map <M-Left> do
  map <M-Right> dp
  map <F9> :new<CR>:read !svn diff<CR>:set syntax=diff buftype=nofile<CR>gg
else
  " spell settings
  :setlocal spell spelllang=en
  " set the spellfile - folders must exist
  set spellfile=~/.vim/spellfile.add
  map <M-Down> ]s
  map <M-Up> [s
endif

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

